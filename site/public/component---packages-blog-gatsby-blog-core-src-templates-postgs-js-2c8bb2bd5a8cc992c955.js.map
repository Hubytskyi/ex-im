{"version":3,"file":"component---packages-blog-gatsby-blog-core-src-templates-postgs-js-2c8bb2bd5a8cc992c955.js","mappings":"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","sources":["webpack://@elegantstack/gatsby-starter-flexiblog-agency/../packages/flow-ui/flow-ui-widgets/src/PostGS/PostGS.Head.jsx","webpack://@elegantstack/gatsby-starter-flexiblog-agency/../packages/flow-ui/flow-ui-widgets/src/PostGS/PostGS.Body.jsx","webpack://@elegantstack/gatsby-starter-flexiblog-agency/../packages/flow-ui/flow-ui-widgets/src/PostGS/PostGS.Tags.jsx","webpack://@elegantstack/gatsby-starter-flexiblog-agency/../packages/flow-ui/flow-ui-widgets/src/AuthorGSCompact/AuthorCompact.jsx","webpack://@elegantstack/gatsby-starter-flexiblog-agency/../packages/blog/gatsby-blog-core/src/templates/postgs.js","webpack://@elegantstack/gatsby-starter-flexiblog-agency/../packages/themes/gatsby-theme-flexiblog-agency/src/containers/PostGS.jsx","webpack://@elegantstack/gatsby-starter-flexiblog-agency/../packages/flow-ui/flow-ui-components/src/SocialMediaGS/SocialMediaGS.jsx","webpack://@elegantstack/gatsby-starter-flexiblog-agency/../packages/flow-ui/flow-ui-components/src/TextList/TextList.jsx"],"sourcesContent":["import React from 'react';\r\nimport { Link as GLink } from 'gatsby'\r\nimport { Link, Text } from 'theme-ui'\r\nimport TextList from '@components/TextList';\r\nimport PageTitle from '@components/PageTitle';\r\n\r\nconst styles = {\r\n  item: {\r\n    display: `inline-block`\r\n  }\r\n};\r\n\r\nexport const PostGSHead = ({title, author, date, category, timeToRead, categoryGS}) => {\r\n\r\n  const authorName = author.split('_').map(name => name.charAt(0).toUpperCase() + name.slice(1)).join(' ')\r\n\r\n  const info = (\r\n    <TextList>\r\n      {author && (\r\n        <Text sx={styles.item}>\r\n          {`By `}\r\n          <Link variant='mute' as={GLink} to={`/${author}`}>\r\n            <strong>{authorName}</strong>\r\n          </Link>\r\n        </Text>\r\n      )}\r\n      {category && (\r\n        <Text sx={styles.item}>\r\n          {`Published in `}\r\n          <Link variant='mute' as={GLink} to={`/${category}`}>\r\n            <strong>{categoryGS.name}</strong>\r\n          </Link>\r\n        </Text>\r\n      )}\r\n      {date && <Text sx={styles.item}>{date}</Text>}\r\n      {timeToRead && (\r\n        <Text sx={{...styles.item, color: `error`}}>\r\n          <strong>{timeToRead} min read</strong>\r\n        </Text>\r\n      )}\r\n    </TextList>\r\n  );\r\n\r\n  return <PageTitle header={title} running={info}/>;\r\n};\r\n","import React from 'react';\r\nimport { Box } from 'theme-ui';\r\n\r\nexport const PostGSBody = ({description}) => {\r\n  return (\r\n    <Box>\r\n      <div\r\n        dangerouslySetInnerHTML={{__html: description}}\r\n      />\r\n    </Box>\r\n)\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'gatsby';\r\nimport { Badge, Heading, Flex, Box } from 'theme-ui';\r\n\r\nconst styles = {\r\n  wrapper: {\r\n    alignItems: `center`\r\n  },\r\n  heading: {\r\n    color: `omegaDark`,\r\n    mr: 3,\r\n    mb: 0\r\n  }\r\n};\r\n\r\nexport const PostGSTags = ({tags}) => {\r\n  return (\r\n    <>\r\n      {tags && tags.length > 0 ? (\r\n        <Flex sx={styles.wrapper}>\r\n          <Heading variant=\"h5\" sx={styles.heading}>\r\n            Tags\r\n          </Heading>\r\n          <Box variant=\"lists.badges\">\r\n            {tags.map((tag, index) => (\r\n              <Badge variant=\"tag\" key={index} as={Link} to={`/${tag}`}>\r\n                #{tag}\r\n              </Badge>\r\n            ))}\r\n          </Box>\r\n        </Flex>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Link as GLink } from 'gatsby';\r\nimport { Box, Heading, Card, Link } from 'theme-ui';\r\nimport Section from '@components/Section';\r\nimport attachSocialIcons from '@helpers/attachSocialIcons';\r\nimport Image from '@elegantstack/gatsby-starter-flexiblog-agency/src/components/Image';\r\nimport SocialMediaGS from '@components/SocialMediaGS';\r\n\r\nconst styles = {\r\n  wrapper: {\r\n    textAlign: `center`\r\n  },\r\n  avatarWrapper: {\r\n    mb: 4,\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n\r\n  },\r\n  title: {\r\n    color: `omegaDark`\r\n  }\r\n};\r\n\r\nconst AuthorGSCompact = ({name, photo, position, instagram, twitter, website, slug, ...props}) => {\r\n\r\n  if (!name) return '';\r\n  const social = [instagram, twitter, website];\r\n\r\n  return (\r\n    <Section aside {...props}>\r\n      <Card variant=\"paper\">\r\n        <Box sx={styles.wrapper}>\r\n          {photo && (\r\n            <Box sx={styles.avatarWrapper}>\r\n              <Link as={GLink} to={`/${slug}`} aria-label={name}>\r\n                <Image icon={photo} width={'150px'} height={'150px'} objectFit={'cover'} borderRadius={'100%'}/>\r\n              </Link>\r\n            </Box>\r\n          )}\r\n          <Link as={GLink} to={`/${slug}`}>\r\n            <Heading variant=\"h3\">{name}</Heading>\r\n          </Link>\r\n          <Heading variant=\"h4\" sx={styles.title}>\r\n            {position}\r\n          </Heading>\r\n          {social && (\r\n            <SocialMediaGS\r\n              variant=\"horizontal\"\r\n              items={attachSocialIcons(social)}\r\n              iconOnly\r\n            />\r\n          )}\r\n        </Box>\r\n      </Card>\r\n    </Section>\r\n  );\r\n};\r\n\r\nexport default AuthorGSCompact;\r\n\r\n","import { graphql } from 'gatsby'\r\nimport PostGSPage from '../containers/PostGS'\r\n\r\nexport default PostGSPage\r\n\r\nexport const pageQuery = graphql`\r\n  query PostGSPageQuery(\r\n    $id: String! \r\n    $category: String!\r\n    $author: String!\r\n  ) {\r\n    postGS: googlePostsSheet(id: { eq: $id }) {\r\n      title\r\n      author\r\n      category\r\n      date\r\n      slug\r\n      tags\r\n      timeToRead\r\n      description\r\n      state\r\n      city\r\n      federal\r\n    }\r\n    categoryGS: googleCategoriesSheet(slug: {eq: $category}) {\r\n      name\r\n    }\r\n    authorGS: googleAuthorsSheet(slug: {eq: $author}) {\r\n      id\r\n      slug\r\n      name\r\n      photo\r\n      description\r\n      expertise\r\n      position\r\n      instagram\r\n      twitter\r\n      website\r\n    }\r\n  }\r\n`\r\n","import React from 'react';\r\nimport { Layout, Stack, Main, Sidebar } from '@layout';\r\nimport { PostGSHead } from '@elegantstack/flow-ui-widgets/src/PostGS/PostGS.Head';\r\nimport { PostGSBody } from '@elegantstack/flow-ui-widgets/src/PostGS/PostGS.Body';\r\nimport { PostGSTags } from '@elegantstack/flow-ui-widgets/src/PostGS/PostGS.Tags';\r\nimport Seo from '@elegantstack/flow-ui-widgets/src/Seo';\r\nimport Divider from '@elegantstack/flow-ui-components/src/Divider';\r\nimport { Card as CardComponent } from 'theme-ui';\r\nimport AuthorGSCompact from '@elegantstack/flow-ui-widgets/src/AuthorGSCompact';\r\n\r\nconst PostGS = ({\r\n                  data: {postGS, categoryGS, authorGS},\r\n                  ...props\r\n                }) => {\r\n\r\n  const {pageContext: {services = {}, siteUrl} = {}} = props;\r\n  return (\r\n    <Layout {...props}>\r\n      <Seo {...postGS} siteUrl={siteUrl}/>\r\n      <Divider/>\r\n      <Stack effectProps={{effect: 'fadeInDown'}}>\r\n        <PostGSHead {...postGS} categoryGS={categoryGS}/>\r\n      </Stack>\r\n      <Divider/>\r\n      <Stack effectProps={{fraction: 0}}>\r\n        <Main>\r\n          <CardComponent variant=\"paper\">\r\n            <PostGSBody description={postGS.description} />\r\n            <Divider/>\r\n            <PostGSTags {...postGS} />\r\n          </CardComponent>\r\n          <Divider space={2}/>\r\n          <CardComponent variant=\"paper\">\r\n            <PostGSBody description={postGS.city} />\r\n          </CardComponent>\r\n          <Divider space={2}/>\r\n          <CardComponent variant=\"paper\">\r\n            <PostGSBody description={postGS.state} />\r\n          </CardComponent>\r\n          <Divider space={2}/>\r\n          <CardComponent variant=\"paper\">\r\n            <PostGSBody description={postGS.federal} />\r\n          </CardComponent>\r\n        </Main>\r\n        <Sidebar>\r\n          <AuthorGSCompact {...authorGS} />\r\n          <Divider/>\r\n        </Sidebar>\r\n      </Stack>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default PostGS;\r\n","import React, { Fragment } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'gatsby'\r\nimport { Flex, NavLink, IconButton, Heading, Divider } from 'theme-ui'\r\nimport hashCode from '@components/utils/hashCode'\r\nimport buildResponsiveVariant from '@components/utils/buildResponsiveVariant'\r\n\r\nconst styles = {\r\n  divider: {\r\n    mt: 3\r\n  }\r\n}\r\n\r\nconst NavigationList = ({ navKey, wrapperProps, items, ...props }) =>\r\n  items ? (\r\n    <Flex {...wrapperProps}>\r\n      {items.map((menuItem, index) => (\r\n        <NavigationItem key={`${navKey}-${index}`} {...menuItem} {...props} />\r\n      ))}\r\n    </Flex>\r\n  ) : null\r\n\r\nconst NavigationDivider = ({ index }) =>\r\n  index !== 0 && <Divider sx={styles.divider} />\r\n\r\nconst NavigationItem = ({\r\n  name,\r\n  slug,\r\n  url,\r\n  Icon,\r\n  color,\r\n  variant,\r\n  iconOnly\r\n}) => {\r\n  let linkProps = {\r\n    sx: { variant: iconOnly ? 'icon' : variant }\r\n  }\r\n\r\n  //External link\r\n  if (url) {\r\n    linkProps = {\r\n      ...linkProps,\r\n      as: 'a',\r\n      href: url,\r\n      target: '_blank',\r\n      rel: 'noopener noreferrer'\r\n    }\r\n  }\r\n  //Internal link\r\n  if (slug) {\r\n    linkProps = {\r\n      ...linkProps,\r\n      as: Link,\r\n      to: slug\r\n    }\r\n  }\r\n\r\n  return iconOnly ? (\r\n    <IconButton {...linkProps} title={name}>\r\n      {Icon && <Icon color={color} />}\r\n    </IconButton>\r\n  ) : (\r\n    <NavLink {...linkProps}>\r\n      {Icon && <Icon color={color} />}\r\n      {name}\r\n    </NavLink>\r\n  )\r\n}\r\n\r\nconst SocialMediaGS = ({\r\n  items,\r\n  variant,\r\n  headingProps,\r\n  wrapperStyle,\r\n  ...props\r\n}) => {\r\n\r\n  if (!items || !items.length) return null\r\n  const wrapperVariant = buildResponsiveVariant('lists.links', variant)\r\n  const linkVariant = buildResponsiveVariant('links', variant)\r\n\r\n  const navKey = `${hashCode(\r\n    items.map(node => node.title || node.name).join()\r\n  )}-nav`\r\n\r\n  const wrapperProps = {\r\n    sx: { variant: wrapperVariant, ...wrapperStyle },\r\n    key: navKey\r\n  }\r\n\r\n  const hasGroupedItems = Array.isArray(items[0].items)\r\n\r\n  return hasGroupedItems ? (\r\n    items.map((node, i) => (\r\n      <Fragment key={`nav-menu-${i}`}>\r\n        <NavigationDivider index={i} />\r\n        <Heading {...headingProps}>{node.title}</Heading>\r\n        <NavigationList\r\n          navKey={navKey}\r\n          wrapperProps={wrapperProps}\r\n          items={node.items}\r\n          variant={linkVariant}\r\n          {...props}\r\n        />\r\n      </Fragment>\r\n    ))\r\n  ) : (\r\n    <NavigationList\r\n      navKey={navKey}\r\n      wrapperProps={wrapperProps}\r\n      items={items}\r\n      variant={linkVariant}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport default SocialMediaGS\r\n\r\nSocialMediaGS.defaultProps = {\r\n  variant: 'horizontal'\r\n}\r\n\r\nconst itemsShape = PropTypes.shape({\r\n  name: PropTypes.string,\r\n  slug: PropTypes.string,\r\n  color: PropTypes.string,\r\n  Icon: PropTypes.element\r\n})\r\n\r\nconst variantShape = PropTypes.oneOf(['horizontal', 'vertical'])\r\n\r\nSocialMediaGS.propTypes = {\r\n  variant: PropTypes.oneOfType([PropTypes.arrayOf(variantShape), variantShape]),\r\n  iconOnly: PropTypes.bool,\r\n  wrapperStyle: PropTypes.object,\r\n  headingProps: PropTypes.object,\r\n  items: PropTypes.oneOfType([\r\n    PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        title: PropTypes.string,\r\n        items: itemsShape\r\n      })\r\n    ),\r\n    PropTypes.arrayOf(itemsShape)\r\n  ])\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Box } from 'theme-ui'\r\n\r\nconst styles = {\r\n  wrapper: separator => ({\r\n    '> *': {\r\n      ':not(:last-child) + *:before': {\r\n        content: `\" ${separator} \"`\r\n      }\r\n    }\r\n  }),\r\n  nowrap: {\r\n    overflow: `hidden`,\r\n    textOverflow: `ellipsis`,\r\n    whiteSpace: `nowrap`\r\n  }\r\n}\r\n\r\nconst TextList = ({ nowrap, separator, children }) => (\r\n  <Box sx={{ ...(nowrap && styles.nowrap), ...styles.wrapper(separator) }}>\r\n    {children}\r\n  </Box>\r\n)\r\n\r\nexport default TextList\r\n\r\nTextList.defaultProps = {\r\n  separator: '・',\r\n  nowrap: false\r\n}\r\n\r\nTextList.propTypes = {\r\n  separator: PropTypes.string,\r\n  nowrap: PropTypes.bool\r\n}\r\n"],"names":["styles","item","display","PostGSHead","title","author","date","category","timeToRead","categoryGS","authorName","split","map","name","charAt","toUpperCase","slice","join","info","TextList","sx","variant","as","GLink","to","color","PageTitle","header","running","PostGSBody","description","dangerouslySetInnerHTML","__html","wrapper","alignItems","heading","mr","mb","PostGSTags","tags","length","tag","index","key","Link","textAlign","avatarWrapper","justifyContent","photo","position","instagram","twitter","website","slug","props","social","Section","aside","Image","icon","width","height","objectFit","borderRadius","SocialMediaGS","items","attachSocialIcons","iconOnly","data","postGS","authorGS","pageContext","siteUrl","services","Seo","Divider","effectProps","effect","fraction","space","city","state","federal","divider","mt","NavigationList","navKey","wrapperProps","menuItem","NavigationItem","NavigationDivider","url","Icon","linkProps","href","target","rel","headingProps","wrapperStyle","wrapperVariant","buildResponsiveVariant","linkVariant","hashCode","node","Array","isArray","i","Fragment","defaultProps","separator","content","nowrap","overflow","textOverflow","whiteSpace","children"],"sourceRoot":""}